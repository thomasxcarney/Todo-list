(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>c});var o=t(537),r=t.n(o),i=t(645),a=t.n(i)()(r());a.push([e.id,"* {\n    padding: 0;\n    margin: 0;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\nbody {\n    display: grid;\n    grid-template-columns: min-content 1fr;\n    grid-template-rows: min-content 1fr;\n    width: 100vw;\n    height: 100vh;\n}\n\n#header {\n    grid-column: 1 / 3;\n    grid-row: 1;\n    color: red;\n    background-color: aquamarine;\n    text-align: center;\n    padding: 20px;\n}\n\n#sidebar {\n    grid-column: 1;\n    grid-row: 2;\n    background-color: rgb(222, 186, 140);\n    padding: 20px;\n}\n\n#content {\n    grid-column: 2;\n    grid-row: 2;\n    background-color: green;\n    padding: 20px;\n}\n\n.to-do-item {\n    background-color: bisque;\n    padding: 10px;\n    margin-bottom: 20px;\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    justify-items: center;\n    align-items: center;\n}\n\n.hidden {\n    overflow: hidden;\n    display: none;\n    visibility: hidden;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;IACT,yCAAyC;AAC7C;;AAEA;IACI,aAAa;IACb,sCAAsC;IACtC,mCAAmC;IACnC,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,UAAU;IACV,4BAA4B;IAC5B,kBAAkB;IAClB,aAAa;AACjB;;AAEA;IACI,cAAc;IACd,WAAW;IACX,oCAAoC;IACpC,aAAa;AACjB;;AAEA;IACI,cAAc;IACd,WAAW;IACX,uBAAuB;IACvB,aAAa;AACjB;;AAEA;IACI,wBAAwB;IACxB,aAAa;IACb,mBAAmB;IACnB,aAAa;IACb,qCAAqC;IACrC,qBAAqB;IACrB,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,kBAAkB;AACtB",sourcesContent:["* {\n    padding: 0;\n    margin: 0;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\nbody {\n    display: grid;\n    grid-template-columns: min-content 1fr;\n    grid-template-rows: min-content 1fr;\n    width: 100vw;\n    height: 100vh;\n}\n\n#header {\n    grid-column: 1 / 3;\n    grid-row: 1;\n    color: red;\n    background-color: aquamarine;\n    text-align: center;\n    padding: 20px;\n}\n\n#sidebar {\n    grid-column: 1;\n    grid-row: 2;\n    background-color: rgb(222, 186, 140);\n    padding: 20px;\n}\n\n#content {\n    grid-column: 2;\n    grid-row: 2;\n    background-color: green;\n    padding: 20px;\n}\n\n.to-do-item {\n    background-color: bisque;\n    padding: 10px;\n    margin-bottom: 20px;\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    justify-items: center;\n    align-items: center;\n}\n\n.hidden {\n    overflow: hidden;\n    display: none;\n    visibility: hidden;\n}"],sourceRoot:""}]);const c=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(a[d]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);o&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var i={},a=[],c=0;c<e.length;c++){var d=e[c],u=o.base?d[0]+o.base:d[0],l=i[u]||0,s="".concat(u," ").concat(l);i[u]=l+1;var m=t(s),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==m)n[m].references++,n[m].updater(p);else{var A=r(p,o);o.byIndex=c,n.splice(c,0,{identifier:s,updater:A,references:1})}a.push(s)}return a}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=t(i[a]);n[c].references--}for(var d=o(e,r),u=0;u<i.length;u++){var l=t(i[u]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}i=d}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var i=n[o]={id:o,exports:{}};return e[o](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0;var o={};(()=>{t.d(o,{X:()=>D,H:()=>H});var e=t(379),n=t.n(e),r=t(795),i=t.n(r),a=t(569),c=t.n(a),d=t(565),u=t.n(d),l=t(216),s=t.n(l),m=t(589),p=t.n(m),A=t(426),g={};g.styleTagTransform=p(),g.setAttributes=u(),g.insert=c().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=s(),n()(A.Z,g),A.Z&&A.Z.locals&&A.Z.locals;const f=[],v=(e,n,t,o)=>({title:e,description:n,dueDate:t,priority:o});function y(e){f.push(e)}y(v("Go to work","I have to go to work :(","2023-09-07T17:12","high priority"));const I=document.getElementById("NewTaskBtn"),h=document.getElementById("newTaskDialog");I.addEventListener("click",(()=>{h.showModal()}));const C=document.querySelectorAll("input");function B(){C.forEach((e=>e.value="")),document.getElementById("normal").checked=!0}const E=document.getElementById("submitNewTask"),b=document.getElementById("submitEditBtn");E.addEventListener("click",(e=>{e.preventDefault(),h.close();let n=document.querySelector('input[name="priority"]:checked').value,t=document.querySelector('input[name="titleInput"]').value,o=document.querySelector('input[name="desInput"]').value,r=document.querySelector('input[name="dueInput"]').value,i=v(t,o,r,n);B(),h.close(),y(i),f.sort(((e,n)=>e.dueDate>n.dueDate?1:e.dueDate<n.dueDate?-1:0))}));const k=document.getElementById("closeNewTaskDialogBtn"),w=document.getElementById("closeEditDialogBtn"),x=document.getElementById("editDialog");function L(e,n){e.addEventListener("click",(e=>{e.preventDefault(),B(),n.close()}))}L(k,h),L(w,x);const T=document.getElementById("content");function D(){for(let e=0;e<f.length;e++)T.appendChild(M(f[e]))}function M(e){let n=document.createElement("div");n.classList.add("to-do-item");let t=document.createElement("h4");t.innerHTML=e.title;let o=document.createElement("p");o.innerHTML=e.dueDate;let r=document.createElement("p");r.innerHTML=e.priority;let i=document.createElement("button");i.innerHTML="Details",i.classList.add("expand");let a=document.createElement("div"),c=document.createElement("p");c.innerHTML=e.description;let d=document.createElement("button");d.innerHTML="Remove item";let u=document.createElement("button");return u.innerHTML="Edit",a.append(c,d,u),a.classList.add("hidden"),n.append(t,i,o,r,a),function(e,n){e.addEventListener("click",(()=>{n.classList.contains("hidden")?n.classList.remove("hidden"):n.classList.add("hidden")}))}(i,a),function(e,n){e.addEventListener("click",(()=>{!function(e){let n=f.indexOf(e);f.splice(n,1),H(),D()}(n)}))}(d,e),function(e,n){e.addEventListener("click",(()=>{!function(e){const n=document.getElementById("editTitleInput"),t=document.getElementById("editDesInput"),o=document.getElementById("editDueInput"),r=document.getElementById("editLow"),i=document.getElementById("editNormal"),a=document.getElementById("editHigh");n.value=e.title,t.value=e.description,o.value=e.dueDate;const c=e.priority.toLowerCase();c==a.value?a.checked=!0:c==i.value?i.checked=!0:c==r.value&&(r.checked=!0)}(n),S.showModal()}))}(u,e),function(e){b.addEventListener("click",(n=>{n.preventDefault();let t=function(){let e,n=document.getElementById("editTitleInput").value,t=document.getElementById("editDesInput").value,o=document.getElementById("editDueInput").value;return 1==document.getElementById("editHigh").checked?e="High priority":1==document.getElementById("editNormal").checked?e="Normal priority":1==document.getElementById("editLow").checked&&(e="Low priority"),[n,t,o,e]}();!function(e,n){e.title=n[0],e.description=n[1],e.dueDate=n[2],e.priority=n[3]}(e,t),x.close(),H(),D()}))}(e),n}function H(){T.innerHTML=""}E.addEventListener("click",(()=>{H(),D()}));const S=document.getElementById("editDialog");D()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,